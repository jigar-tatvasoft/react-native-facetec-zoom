package ZoomProcessors;

//import com.facetec.zoom.sampleapp.BuildConfig;

import android.content.Context;
import android.graphics.Color;

import com.facetec.sdk.FaceTecCancelButtonCustomization;
import com.facetec.sdk.FaceTecCustomization;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSecurityWatermarkImage;
import com.reactlibrary.R;

public class ZoomGlobalState {
  // Replace string below with your license key from https://dev.zoomlogin.com/zoomsdk/#/account
//    public static String DeviceLicenseKeyIdentifier = BuildConfig.ZOOM_LICENSE_KEY_IDENTIFIER;

  // "https://api.zoomauth.com/api/v2/biometrics" for FaceTec Managed Testing API.
  // "http://localhost:8080" if running ZoOm Server SDK (Dockerized) locally.
  // Otherwise, your webservice URL.
  public static String ZoomServerBaseURL = "https://api.zoomauth.com/api/v2/biometrics";

  // The customer-controlled public key used during encryption of FaceMap data.
  // Please see https://dev.zoomlogin.com/zoomsdk/#/licensing-and-encryption-keys for more information.
  public static String PublicFaceMapEncryptionKey =
          "-----BEGIN PUBLIC KEY-----\n" +
                  "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5PxZ3DLj+zP6T6HFgzzk\n" +
                  "M77LdzP3fojBoLasw7EfzvLMnJNUlyRb5m8e5QyyJxI+wRjsALHvFgLzGwxM8ehz\n" +
                  "DqqBZed+f4w33GgQXFZOS4AOvyPbALgCYoLehigLAbbCNTkeY5RDcmmSI/sbp+s6\n" +
                  "mAiAKKvCdIqe17bltZ/rfEoL3gPKEfLXeN549LTj3XBp0hvG4loQ6eC1E1tRzSkf\n" +
                  "GJD4GIVvR+j12gXAaftj3ahfYxioBH7F7HQxzmWkwDyn3bqU54eaiB7f0ftsPpWM\n" +
                  "ceUaqkL2DZUvgN0efEJjnWy5y1/Gkq5GGWCROI9XG/SwXJ30BbVUehTbVcD70+ZF\n" +
                  "8QIDAQAB\n" +
                  "-----END PUBLIC KEY-----";

  // Used for bookkeeping around demonstrating enrollment/authentication functionality of ZoOm.
//    public static String randomUsername = "";
//    public static boolean isRandomUsernameEnrolled = false;

  // This app can modify the customization to demonstrate different look/feel preferences for ZoOm.
  public static FaceTecCustomization currentCustomization = new FaceTecCustomization();

  public static void initializeFaceTecSDKFromAutogeneratedConfig(Context context, String key, FaceTecSDK.InitializeCallback callback) {
    FaceTecSDK.initializeInDevelopmentMode(context, key, PublicFaceMapEncryptionKey, callback);
  }

  public static FaceTecCustomization retrieveConfigurationWizardCustomization() {

    // For Color Customization
    int outerBackgroundColor = Color.parseColor("#ffffff");
    int frameColor = Color.parseColor("#ffffff");
    int borderColor = Color.parseColor("#000000");
    int ovalColor = Color.parseColor("#f8a61b");
    int dualSpinnerColor = Color.parseColor("#f8a61b");
    int textColor = Color.parseColor("#919191");
    int buttonAndFeedbackBarColor =  Color.parseColor("#3c8f7c");
    int buttonAndFeedbackBarTextColor = Color.parseColor("#ffffff");
    int buttonColorPressed = Color.parseColor("#3c8f7c");

    // For Frame Corner Radius Customization
    int frameCornerRadius = 20;

    // For Cancel Button Customization


    // Set a default customization
    FaceTecCustomization defaultCustomization = new FaceTecCustomization();


    // Set Frame Customization
    defaultCustomization.getFrameCustomization().cornerRadius = frameCornerRadius;
    defaultCustomization.getFrameCustomization().backgroundColor = frameColor;
    defaultCustomization.getFrameCustomization().borderColor = borderColor;

    // Set Overlay Customization
    defaultCustomization.getOverlayCustomization().backgroundColor = outerBackgroundColor;

    // Set Guidance Customization
    defaultCustomization.getGuidanceCustomization().backgroundColors = frameColor;
    defaultCustomization.getGuidanceCustomization().foregroundColor = textColor;
    defaultCustomization.getGuidanceCustomization().buttonBackgroundNormalColor = buttonAndFeedbackBarColor;
    defaultCustomization.getGuidanceCustomization().buttonBackgroundDisabledColor = buttonColorPressed;
    defaultCustomization.getGuidanceCustomization().buttonBackgroundHighlightColor = buttonColorPressed;
    defaultCustomization.getGuidanceCustomization().buttonTextNormalColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getGuidanceCustomization().buttonTextDisabledColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getGuidanceCustomization().buttonTextHighlightColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getGuidanceCustomization().retryScreenImageBorderColor = borderColor;
    defaultCustomization.getGuidanceCustomization().retryScreenOvalStrokeColor = borderColor;

    // Set Oval Customization
    defaultCustomization.getOvalCustomization().strokeColor = ovalColor;
    defaultCustomization.getOvalCustomization().progressColor1 = dualSpinnerColor;
    defaultCustomization.getOvalCustomization().progressColor2 = dualSpinnerColor;

    // Set Feedback Customization
    defaultCustomization.getFeedbackCustomization().backgroundColors = buttonAndFeedbackBarColor;
    defaultCustomization.getFeedbackCustomization().textColor = buttonAndFeedbackBarTextColor;


    // Set Result Screen Customization
    defaultCustomization.getResultScreenCustomization().backgroundColors = frameColor;
    defaultCustomization.getResultScreenCustomization().foregroundColor = textColor;
    defaultCustomization.getResultScreenCustomization().activityIndicatorColor = buttonAndFeedbackBarColor;
    defaultCustomization.getResultScreenCustomization().resultAnimationBackgroundColor = buttonAndFeedbackBarColor;
    defaultCustomization.getResultScreenCustomization().resultAnimationForegroundColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getResultScreenCustomization().uploadProgressFillColor = buttonAndFeedbackBarColor;

    // Set Security Watermark Customization

    // Set ID Scan Customization
    defaultCustomization.getIdScanCustomization().selectionScreenBackgroundColors = frameColor;
    defaultCustomization.getIdScanCustomization().selectionScreenForegroundColor = textColor;
    defaultCustomization.getIdScanCustomization().reviewScreenBackgroundColors = frameColor;
    defaultCustomization.getIdScanCustomization().reviewScreenForegroundColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().reviewScreenTextBackgroundColor = buttonAndFeedbackBarColor;
    defaultCustomization.getIdScanCustomization().captureScreenForegroundColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().captureScreenTextBackgroundColor = buttonAndFeedbackBarColor;
    defaultCustomization.getIdScanCustomization().buttonBackgroundNormalColor = buttonAndFeedbackBarColor;
    defaultCustomization.getIdScanCustomization().buttonBackgroundDisabledColor = buttonColorPressed;
    defaultCustomization.getIdScanCustomization().buttonBackgroundHighlightColor = buttonColorPressed;
    defaultCustomization.getIdScanCustomization().buttonTextNormalColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().buttonTextDisabledColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().buttonTextHighlightColor = buttonAndFeedbackBarTextColor;
    defaultCustomization.getIdScanCustomization().captureScreenBackgroundColor = frameColor;
    defaultCustomization.getIdScanCustomization().captureFrameStrokeColor = borderColor;


    return defaultCustomization;
  }


}
